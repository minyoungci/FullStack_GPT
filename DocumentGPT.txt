# Development flow

앱을 업데이트하려면 소스 파일을 저장하세요. 그렇게 하면 Streamlit이 변경 사항이 있는지 감지하고 앱을 다시 실행할지 여부를 묻습니다. 
화면 오른쪽 상단의 "항상 다시 실행"을 선택하여 소스 코드를 변경할 때마다 앱을 자동으로 업데이트하도록 설정하세요.

이를 통해 빠른 대화형 루프에서 작업할 수 있습니다: 코드를 입력하고 저장한 다음 라이브로 시도하고, 더 많은 코드를 입력하고 저장하고, 시도하고, 이를 반복하여 결과에 만족할 때까지 진행합니다.
 코딩과 결과를 실시간으로 확인하는이 밀접한 루프는 Streamlit이 여러분의 삶을 더 쉽게 만드는 방법 중 하나입니다.


# Data Flow

Streamlit의 아키텍처는 일반적인 Python 스크립트를 작성하는 방식과 동일하게 앱을 작성할 수 있게 해줍니다.
이를 가능하게 하기 위해 Streamlit 앱은 독특한 데이터 플로우를 가지고 있습니다: 화면에서 무언가를 업데이트해야 할 때마다 Streamlit은 전체 Python 스크립트를 처음부터 끝까지 다시 실행합니다.
이는 두 가지 상황에서 발생할 수 있습니다:

앱의 소스 코드를 수정할 때마다.
사용자가 앱의 위젯과 상호 작용할 때. 예를 들어 슬라이더를 드래그하거나 입력 상자에 텍스트를 입력하거나 버튼을 클릭할 때.
위젯에 on_change(또는 on_click) 매개변수를 통해 콜백이 전달되는 경우 해당 콜백은 항상 나머지 스크립트보다 먼저 실행됩니다. 
콜백에 대한 자세한 내용은 Session State API 참조 가이드를 참조하세요.

이 모든 것을 빠르고 원활하게 만들기 위해 Streamlit은 뒷면에서 여러분을 위해 일부 작업을 처리합니다. 이 이야기에서 중요한 역할을 하는 것 중 하나는 @st.cache_data 데코레이터입니다. 
이 데코레이터를 사용하면 앱이 다시 실행될 때 특정 비용이 많이 드는 계산을 건너 뛸 수 있습니다. 캐싱에 대해서는 뒷부분에서 다루겠습니다.

# Multipage apps

앱이 커지면 여러 페이지로 구성하여 정리하는 것이 유용해집니다. 이는 개발자로서 앱을 더 쉽게 관리하고 사용자로서 더 쉽게 탐색할 수 있도록 만듭니다. Streamlit은 다중 페이지 앱을 만들기 위한 효과적인 방법을 제공합니다. 페이지는 자동으로 앱 사이드바 내에 멋진 네비게이션 위젯으로 표시되며, 페이지를 클릭하면 프론트엔드를 다시로드하지 않고 페이지로 이동하여 앱 브라우징이 빠르게 이루어집니다.

이전 페이지에서는 뉴욕시의 픽업 및 드롭오프에 대한 공개 Uber 데이터 세트를 탐험하기 위해 "싱글 페이지 앱"을 만들었습니다. 이번 가이드에서는 다중 페이지 앱을 만드는 방법을 배우겠습니다. 다중 페이지 앱을 만드는 데 필요한 기초를 이해한 후에는 다음 섹션에서 익숙한 streamlit hello 명령을 다중 페이지 앱으로 변환해보겠습니다.


# Structuring multipage apps

다중 페이지 앱을 만드는 데 필요한 내용을 이해해 봅시다. 페이지를 정의하는 방법, 다중 페이지 앱을 구조화하고 실행하는 방법, 사용자 인터페이스에서 페이지 간 이동하는 방법 등이 포함됩니다. 기본 사항을 이해한 후에는 다음 섹션으로 바로 이동하여 익숙한 streamlit hello 명령을 다중 페이지 앱으로 변환할 수 있습니다.


# Adding pages

진입 파일을 만든 후에는 .py 파일을 진입 파일과 상대적인 pages/ 디렉터리에 생성하여 페이지를 추가할 수 있습니다. 예를 들어, 진입 파일이 Home.py인 경우 "About" 페이지를 정의하기 위해 pages/About.py 파일을 만들 수 있습니다.

파일 이름에 이모지를 추가할 때는 터미널에서 자동 완성을 쉽게 하기 위해 번호 접두사를 포함하는 것이 좋은 실천 방법입니다. 터미널 자동 완성은 유니코드(이모지 표현 방식)에 혼동을 일으킬 수 있습니다.

페이지는 pages/ 디렉터리에 있는 .py 파일로 정의됩니다. 페이지의 파일 이름은 아래 섹션의 규칙을 기반으로 사이드바에서 페이지 이름으로 변환됩니다. 예를 들어 About.py 파일은 사이드바에서 "About"으로 나타나며, 2_Page_two.py는 "Page two"로 나타나며, 3_😎_three.py는 "😎 three"로 나타납니다:

pages/ 디렉터리에 있는 .py 파일만 페이지로로드됩니다. Streamlit은 pages/ 디렉터리와 하위 디렉터리에 있는 다른 모든 파일을 무시합니다.

- session_state : 메세지를 빈 리스트에 넣으면 안되는 이유는 코드가 실행될 때마다 리스트가 초기화 되기 때문. 따라서 session_state에 우리의 데이터를 저장해야함. 
session_state는 저장가능.

# st.file_uploader

파일 업로더 위젯을 표시하는 st.file_uploader 함수입니다.

기본적으로 업로드된 파일은 200MB로 제한됩니다. 이를 구성하려면 server.maxUploadSize 설정 옵션을 사용할 수 있습니다. 설정 옵션을 설정하는 방법에 대한 자세한 내용은 Streamlit 문서를 참조하세요.

st.file_uploader(label, type=None, accept_multiple_files=False, key=None, help=None, on_change=None, args=None, kwargs=None, *, disabled=False, label_visibility="visible")

수정