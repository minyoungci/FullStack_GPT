# Development flow

앱을 업데이트하려면 소스 파일을 저장하세요. 그렇게 하면 Streamlit이 변경 사항이 있는지 감지하고 앱을 다시 실행할지 여부를 묻습니다. 
화면 오른쪽 상단의 "항상 다시 실행"을 선택하여 소스 코드를 변경할 때마다 앱을 자동으로 업데이트하도록 설정하세요.

이를 통해 빠른 대화형 루프에서 작업할 수 있습니다: 코드를 입력하고 저장한 다음 라이브로 시도하고, 더 많은 코드를 입력하고 저장하고, 시도하고, 이를 반복하여 결과에 만족할 때까지 진행합니다.
 코딩과 결과를 실시간으로 확인하는이 밀접한 루프는 Streamlit이 여러분의 삶을 더 쉽게 만드는 방법 중 하나입니다.


# Data Flow

Streamlit의 아키텍처는 일반적인 Python 스크립트를 작성하는 방식과 동일하게 앱을 작성할 수 있게 해줍니다.
이를 가능하게 하기 위해 Streamlit 앱은 독특한 데이터 플로우를 가지고 있습니다: 화면에서 무언가를 업데이트해야 할 때마다 Streamlit은 전체 Python 스크립트를 처음부터 끝까지 다시 실행합니다.
이는 두 가지 상황에서 발생할 수 있습니다:

앱의 소스 코드를 수정할 때마다.
사용자가 앱의 위젯과 상호 작용할 때. 예를 들어 슬라이더를 드래그하거나 입력 상자에 텍스트를 입력하거나 버튼을 클릭할 때.
위젯에 on_change(또는 on_click) 매개변수를 통해 콜백이 전달되는 경우 해당 콜백은 항상 나머지 스크립트보다 먼저 실행됩니다. 
콜백에 대한 자세한 내용은 Session State API 참조 가이드를 참조하세요.

이 모든 것을 빠르고 원활하게 만들기 위해 Streamlit은 뒷면에서 여러분을 위해 일부 작업을 처리합니다. 이 이야기에서 중요한 역할을 하는 것 중 하나는 @st.cache_data 데코레이터입니다. 
이 데코레이터를 사용하면 앱이 다시 실행될 때 특정 비용이 많이 드는 계산을 건너 뛸 수 있습니다. 캐싱에 대해서는 뒷부분에서 다루겠습니다.